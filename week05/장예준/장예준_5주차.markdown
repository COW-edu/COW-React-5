React Hook은 리액트 16.8부터 도입된 기능으로 
클래스 컴포넌트 없이도 함수형 컴포넌트 안에서 상태 관리나 생명주기 기능을 사용할 수 있게 해주는 기능입니다.
Hook에는 기본적으로 useState, useEffect 등이 있으며 사용자 정의 훅을 만들어 반복 로직을 재사용할 수도 있습니다.

hook이 필요한 이유

복잡한 컴포넌트들은 이해하기 어려움
componentDidMount에서 데이터 요청과 이벤트 리스너 등록처럼 서로 다른 목적의 로직이 섞여 있음
componentDidUpdate도 유사하게 여러 역할을 수행함
componentWillUnmount는 정리clean up 용도로 사용되지만 다른 생명주기 함수와의 관련성이 낮음

서로 관련 없는 로직이 하나의 생명주기 메서드에 뒤섞임
관련된 코드끼리 묶기 어렵고, 불필요하게 의존성이 생기며, 버그 발생 가능성 증가
결과적으로 컴포넌트의 무결성과 유지보수성이 떨어짐
복잡한 클래스 컴포넌트보다 Hook을 활용한 작고 목적 중심의 함수 조합 방식이 더 직관적이고 재사용 가능하며 테스트에도 유리

Class은 사람과 기계를 혼동시킵니다.
this 키워드의 복잡성
JavaScript의 this는 타 언어와 달리 동작
개발자가 this의 동작 원리를 정확히 이해해야만 Class 컴포넌트를 제대로 다룰 수 있음

구조적 복잡성
props, state, 데이터 흐름을 이해하고 있어도 class 구문 자체가 진입장벽
함수형 컴포넌트와 class 컴포넌트의 구분, 사용 시점 등에 대해 개발자들 사이에서도 의견이 다름

레퍼런스
useState(initialState)
컴포넌트의 최상위 레벨에서 useState를 호출하여 state 변수를 선언합니다.
배열 구조 분해를 사용하여 [something, setSomething]과 같은 state 변수의 이름을 지정하는 것이 규칙입니다

```jsx
import { useState } from 'react';

function MyComponent() {
  const [count, setCount] = useState(0);
  // ...  
```
매개변수 
initialState: state의 초기 설정값입니다.

반환값 
useState는 정확히 두 개의 값을 가진 배열을 반환합니다.
현재 state입니다. 첫 번째 렌더링 중에는 전달한 initialState와 일치합니다.
주의 사항 
useState는 Hook이므로 컴포넌트의 최상위 레벨이나 직접 만든 Hook에서만 호출할 수 있습니다
반복문이나 조건문에서는 호출할수 없습니다

setSomething(nextState)
useState가 반환하는 set 함수를 사용하면 state를 다른 값으로 업데이트 리렌더링 할수있음

매개변수 
nextState: state가 될 값입니다. 값은 모든 데이터 타입이 허용되지만, 함수에 대해서는 특별한 동작이 있습니다

반환값 
set 함수는 반환값이 없습니다.


주의 사항 
1.set 함수는 다음 렌더링에 대한 state 변수만 업데이트합니다
2.컴포넌트와 그 자식들을 리렌더링하지 않습니다
3.이전 렌더링의 정보를 저장하는 데 사용할 수 있습니다
4.업데이터 함수를 두 번 호출합니다

사용법 
컴포넌트에 state 추가하기 
import { useState } from 'react';

function MyComponent() {
  const [age, setAge] = useState(42);
  const [name, setName] = useState('Taylor');
}

use effect
useEffect는 외부 시스템과 컴포넌트를 동기화하는 React Hook입니다.
useEffect(setup, dependencies?)

useEffect(setup, dependencies?) 
컴포넌트의 최상위 레벨에서 useEffect를 호출하여 Effect를 선언할 수 있습니다

```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';

function ChatRoom({ roomId }) {
  const [serverUrl, setServerUrl] = useState('https://localhost:1234');

  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => {
      connection.disconnect();
    };
  }, [serverUrl, roomId]);
}
```
매개변수
useEffect는 두 개의 매개변수를 받습니다. 
첫 번째는 설정 함수(setup), 
두 번째는 의존성 배열(dependencies) 입니다.

setup : 부수효과(side effect)의 로직이 들어가는 함수입니다. 이 함수는 컴포넌트가 처음으로 DOM에 마운트된 이후 실행됩니다.

dependencies : 함수 내부에서 사용하는 반응형 값들을 지정하는 배열입니다.

반환값 
useEffect는 undefined를 반환합니다.

useEffect 주의할점
조건문, 반복문, 또는 중첩된 함수 안에서는 사용이 불가능
외부 시스템과 컴포넌트를 동기화할 필요가 없는 경우, Effect를 선언할 필요가 없을 수 있습니다.
개발 모드에만 한정하여 한 번의 추가적인 설정 + 정리 사이클을 실행합니다

ffect를 실행하기 전에 브라우저가 업데이트된 화면을 먼저 렌더링하도록 합니다
React는 화면이 업데이트되어 브라우저가 화면을 그리기 전에 Effect를 실행할 수 있습니다.
React는 때로 Effect 내부의 상태 업데이트를 처리하기 전에 브라우저가 화면을 다시 그리도록 허용할 수 있습니다
Effect는 client 환경에서만 동작합니다. 서버 렌더링에서는 동작하지 않습니다.

사용방법
```
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';

function ChatRoom({ roomId }) {
  const [serverUrl, setServerUrl] = useState('https://localhost:1234');

  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => {
      connection.disconnect();
    };
  }, [serverUrl, roomId]);
  // ...
}
```

Effect를 이용한 데이터 페칭 
프레임워크를 사용하고 있다면 프레임워크의 데이터 페칭 메커니즘을 이용하는 것이 Effect를 직접 작성하는 것보다 더 효율적 임
만약 직접 Effect를 사용한 코드 예시

import { useState, useEffect } from 'react';
import { fetchBio } from './api.js';

export default function Page() {
  const [person, setPerson] = useState('Alice');
  const [bio, setBio] = useState(null);

  useEffect(() => {
    let ignore = false;
    setBio(null);
    fetchBio(person).then(result => {
      if (!ignore) {
        setBio(result);
      }
    });
    return () => {
      ignore = true;
    };
  }, [person]);

  // ...