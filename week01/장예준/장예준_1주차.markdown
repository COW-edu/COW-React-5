1. 브라우저는 어떻게 동작하는가?
* 브라우저는 사용자가 입력한 주소를 바탕으로 서버에 요청을 보내고 HTML, CSS, JS 파일을 받아와 화면에 렌더링하는 소프트웨어이다
* 브라우저의 구성 요소는 사용자 인터페이스 브라우저 엔진 렌더링 엔진 자바스크립트 해석기 자료 저장소 등으로 이루어져 있다
* 렌더링 엔진은 HTML을 DOM 트리로 CSS를 CSSOM 트리로 파싱하고 이를 결합해 렌더 트리를 생성한다
* 렌더 트리는 Layout과 Painting 단계를 거쳐 사용자 화면에 출력된다
* 파싱 과정은 어휘 분석과 구문 분석으로 나뉘며 입력 데이터를 토큰화한 뒤 문법 트리로 구조화한다
* 브라우저는 유연한 HTML 문법을 처리하며 오류가 있어도 자동으로 수정하여 동작을 유지한다
* 이러한 구조는 브라우저가 웹 페이지를 시각적으로 안정적으로 표현할 수 있도록 한다
2. DOM과 Virtual DOM이란?
* DOM은 Document Object Model의 약자로 HTML 문서를 구조화하여 트리 형태로 나타낸 객체 모델이다
* 브라우저는 HTML 문자열을 파싱해 DOM 트리를 생성하고 자바스크립트를 통해 이 트리에 접근하고 조작할 수 있다
* DOM 노드는 Element Node, Text Node, Attribute Node 등으로 구성된다
* DOM 조작은 전체 렌더링을 유발하므로 반복적인 업데이트에서 성능 저하가 발생할 수 있다

* Virtual DOM은 실제 DOM의 가상 복사본으로 메모리 상에서 동작하며 변경 사항을 먼저 적용하고 이후 실제 DOM에 반영한다
* 변경 전과 후의 Virtual DOM을 비교하는 diffing 알고리즘을 통해 최소한의 변경만 실제 DOM에 전달한다
* React는 Virtual DOM 방식을 채택하여 상태 변화 시 효율적인 렌더링을 구현한다
* 리스트 렌더링에서는 key prop을 사용해 요소 추적 효율을 높이며 잘못된 key 사용은 불필요한 재렌더링을 유발할 수 있다

3. CSR / SSR (+ SPA / MPA)
CSR은 Client Side Rendering의 약자로 브라우저가 HTML을 받고 자바스크립트를 통해 화면을 구성하는 방식이다
CSR은 초기 로딩이 느릴 수 있으나 이후 빠른 인터랙션을 제공하고 서버 부하가 적다
SSR은 Server Side Rendering의 약자로 서버에서 HTML을 완성한 후 클라이언트에 전달하는 방식이다
SSR은 초기 로딩과 SEO에 유리하지만 서버에 부하가 발생하고 인터랙션까지 시간이 필요하다


SPA는 Single Page Application의 약자로 하나의 HTML 파일로 구성된 애플리케이션이며 클라이언트에서 필요한 부분만 동적으로 렌더링한다(단일 페이지)
MPA는 Multi Page Application의 약자로 요청 시마다 서버에서 새로운 HTML 파일을 받아오는 방식이다

SPA는 빠른 전환과 부드러운 UX를 제공하지만 SEO에 불리하고 MPA는 SEO에 강하지만 페이지 전환 시 깜빡임이 발생할 수 있다
정적인 콘텐츠를 미리 생성하는 방식은 SSG라고 하며 블로그나 변동이 적은 페이지에 적합하다

CSR과 SSR의 장점을 혼합한 유니버설 렌더링 방식도 있으며 Nextjs Nuxtjs Gatsby 등 다양한 프레임워크가 이를 지원한다
렌더링 방식은 프로젝트의 특성에 따라 선택되어야 하며 내부 시스템은 CSR 외부 공개 서비스는 SSR 또는 SSG가 적합하다