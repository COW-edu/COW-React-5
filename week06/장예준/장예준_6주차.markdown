웹 컴포넌트 스타일링 관리 : CSS-in-JS vs CSS-in-CSS

html 1991년에 등장을 하였고 초기에는 스타일을 지정할수 있는 css가 없었음
but 웹 사용자 증가와 디자인 수요가 증가하면서 
1996년 css가 처음 도입됨 이후 웹이 복잡해지고 동적 기능이 요구되자
html css에서 한계가 나타나게 되었고 
이를 해결하기 위하여 css-in-js와 css in css 두가지 접근 방식이 등장하게 되었음 

css in css란
css모듈은 지역 범위를 제한하는 방식
클래스명을 만들면 자동으로 클래스명으로 변환 충돌을 방지 
번들러로 불러오면 사용자 정의명과 고유명으로 구성된 객체 반환

css 모듈은 동일 프로젝트 소스안에 css 클래스 이름이 중복되어도 새로운 이름이 입혀저 중복 및 관리의 위험성이 적고 css 네이밍 규칙이 간소화 됨

단 단점 
css 네이밍 규칙이 간소화된다는 장접이 있지만
한 곳에서 모든 것을 작성하지 않기 떄문에 별도로 많은 css 파일을 만들어
관리해야 하는 단점이 있습니다.

css 전처리기 Preprocessor
자신만의 특별한 구문(Syntax)을 가지고 CSS를 생성하는 프로그램
CSS 전처리기에는 다양한 모듈이 존재하는데 그 중에서도 Sass·Less·Stylus가 가장 많이 사용됩니다

sass less stylus는 모두 css 전처리기 임
개발자가 더 편하게 스타일을 작성할수 있도록 도와주는 css 보조 도구 임
sass 가장 먼저 나온 전처리기
초기에는 ruby 언어 기반이라 많이 느림 
but 나중에 node js 기반인 node sass가 나오면서 속도와 사용성이 개선되어 다시 인기를 얻음

less
트위터의 bootstrap 프레임워크에 사용되면서 유명해짐
javascript 문법과 비슷하게 생겼고 node js로 작동합니다

stylus
프로그래밍 기능이 가장 강력함
css 에서 함수 연산 반복문 등을 자유롭게 쓸수 있음

css in js란
css in js는 단어 그대로 자바스크립트 코드에서 css를 작성하는 방식을 뜻함
2014년 개발 됨

css 주요 문제점 정리 but CSS-in-JS로 이들 이슈를 모두 해결할 수 있다고 강조함
- Global namespace: 글로벌 공간에 선언된 이름의 명명 규칙 필요
- Dependencies: CSS간의 의존 관계를 관리
- Dead Code Elimination: 미사용 코드 검출
- Minification: 클래스 이름의 최소화
- Sharing Constants: JS와 CSS의 상태 공유
- Non-deterministic Resolution: CSS 로드 우선 순위 이슈
- Isolation: CSS와 JS의 상속에 따른 격리 필요 이슈

Styled Components는 코드를 더 모듈화하고 
React와 같은 프레임워크에 최적화된 스타일 관리 방식을 제공합니다. 
CSS를 JS처럼 다루고 싶은 개발자에게 매우 유용하지만 
학습이 필요하고 프로젝트에 따라 적절히 선택을 해야함

Styled Components는 CSS-in-JS 스타일링을 위한 프레임워크입니다. 

css모듈 결과 첫 번째 페이지 전환에 90.5ms가 소요되었음
Styled Components에 비해서 시간이 줄어들었음 
CSS 파일이 추출되는 CSS 모듈 방식은 자바스크립트 해석 과정이 따로 
없기 때문에 페이지가 훨씬 빨리 전환이 됨

CSS-in-JS가 대세인 이유 4가지
중복되지 않는 class 이름을 고려할 필요가 없다.
JS 코드와 CSS가 상태 값을 공유할 수 있다.
컴포넌트와 스타일 코드를 쉽게 오갈 수 있다.
자동으로 vendor-prefix을 붙여준다.

CSS-in-JS 트랜드
css-in-js의 동작 방식은 크게 runtime, zero-runtime으로 나뉘어 짐
runtime이 반드시 성능저하를 발생시키진 않고 프로젝트 규모와 상황에 따라 달라질 수 있음

runtime
javascript runtime에서 필요한 CSS를 동적으로 만들어 적용한다.
styled-components

css-loader가 필요 없다.
css파일을 생성하지 않기에 webpack에서 css-loader가 필요 없다.

런타임 오버헤드가 발생할 수 있다.
런타임에서 동적으로 스타일을 생성하기에 스타일이 수시로 변경된다면...
ex 스크롤, 드래그 앤 드랍 관련 복잡한 

zero-runtime
런타임에 css를 생성하지않으면서 페이지를 더 빨리 로드할 수 있다.
JS 번들에서 styles코드를 모두 실행되어야 페이지가 로드된다.

runtime에서 스타일이 생성되지 않는다.
props 변화에 따른 동적인 스타일은 css 변수를 통해 적용한다.


빌드 타임에 css를 생성해야기에 webpack 설정을 해야 한다.
React CRA을 사용한다면 eject해서 webpack 설정해야 하는데 굉장히 번거롭다.

runtime에서 css polyfill를 사용할 수 없어 브라우저 버전 이슈가 있을 수 있다. 첫 load는 빠르지만, 첫 paint는 느릴 수 있다.

SSR

critical CSS
초기 화면에서 필요한 CSS이다.
critical CSS 추출과 runtime CSS 생성은 trade-off 관계를 갖고 있다.
SSR에서 중요한 쟁점이다. 사전에 CSS 추출을 할 것인가?

고려 요소	적합한 선택
런타임 비용 무관	Styled Components, Emotion 등
CSS 소스 재활용 필요	CSS-in-CSS 또는 전처리기 기반 방식
성능 민감, 정적 렌더	Stitches, vanilla-extract (컴파일 기반)
SSR 환경	Critical CSS 처리 가능한 static 방식
CSR 환경	런타임 스타일 사용 가능 도구

Tailwind란? 무엇인가
Tailwind CSS는 사용자(개발자)가 앱을 더 빠르고 쉽게 만들 수 있도록 설계된 유틸리티 우선 프레임 워크이다.


정의 :
유틸리티 클래스를 사용하여 레이아웃, 색상, 간격, 타이포그래피, 그림자 등 을 제어하여 HTML을 벗어나거나 사용자 정의 CSS를 한 줄도 작성하지 않고 완전한 사용자 정의 구성요소 디자인을 만들 수 있다.

Tailwind CSS의 장점
1. CSS 작성 최소화
스타일을 HTML 클래스 속성에 직접 지정
Sass나 Styled Components처럼 별도의 CSS 파일 없이도 디자인 가능

2. CSS 파일 크기 감소
컴포넌트마다 CSS 파일을 만들 필요 없음

유틸리티 클래스 방식으로 스타일 지정 → 전반적으로 CSS 파일 수가 적음

3. 빠른 빌드 및 파일 최적화
PurgeCSS 통합으로 실제 사용된 클래스만 남기고 나머지는 제거
빌드 후 CSS 파일 용량 대폭 감소

4. 클래스 이름 고민 
클래스명을 새로 정의할 필요 없이 Tailwind에서 제공하는 유틸리티 이름 사용

5. 안전한 스타일 수정
유틸리티 클래스는 로컬 스타일 → 수정 시 다른 컴포넌트에 영향 X

6. 반응형 지원 우수
모바일 우선 접근 방식 기본 내장

sm:, md:, lg: 같은 접두사로 쉽게 반응형 레이아웃 구성 가능

7. 캐싱 최적화
CSS 파일은 변경되지 않고 HTML 내 클래스만 수정

브라우저 CSS 캐시가 잘 유지되어 사용자 측 재다운로드 필요 감소

8. 강력한 커스터마이징
JS 기반 설정 파일로 테마, 색상, 폰트 등을 자유롭게 확장 가능

다크 모드도 dark: 접두사로 간단하게 설정 가능

단점

코드의 가독성 & 유지 보수
클래스 네임을 스타일로 추가해야하기 때문에 코드가 너무 복잡하고 더러워 보일 수 있다.
유지보수를 해야하는데 스타일을 고쳐야 할 경우 이름이 없어 어디가 어딘지 모르고 스타일에 따라 찾아야한다.

러닝커브 및 적응
CSS를 베이스로 만들어졌지만 사용하기 위해선 tailwind의 방식을 따라야 하기 때문에 적응하기 힘들 수 도 있다.

스타일 동적 적용
styled-components와 비교해서 상태에 따라 style을 지정하는 것이 어렵다.
필요한 경우 util 함수를 만들어서 사용했다.

